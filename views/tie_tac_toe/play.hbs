<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Game Table</title>
    <link rel="stylesheet" href="../styles.css">
</head>

<body>
    <header>
        <nav>
            <ul>
                <li><a href="/rooms">Home</a></li>
                <li><a href="/create-rooms">Create Table</a></li>
                <li><a href="/leaderboard">Leaderboard</a></li>
                <li><a href="/ranked-player">Ranked Player</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/logout">Logout</a></li>
            </ul>
        </nav>
    </header>
    
    <h2>ROOM ID: {{room.id}}</h2>
    <div class="main-container">
        <div class="game-tables">
            <div id="main">
                <h1>TIC-TAC-TOE</h1>
                <div id="board" class="board"></div>
                <br>
                <button id="reset" class="reset">RESET</button>
                <p id="message" class="message"></p>
            </div>
            <script src="main.js"></script>
        </div>
        <div class="chat-box">
            <h3>Table Chat</h3>
            <div class="chat-box" id="chat-box">
                {{#each chatMessages}}
                <p>{this.createdAt}-{{this.username}}: {{this.message}}</p>
                {{/each}}
            </div>
            <textarea id="message" name="message" placeholder="Type a message..." required></textarea>
            <button id="submit-chat" type="submit">Send</button>
            <div class="messages">
        
            </div>
        </div>
    </div>


    <footer>
        <p>&copy; 2024 Game Tic Tac Toe</p>
    </footer>

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        header {
            background-color: #333;
            padding: 10px;
            text-align: center;
        }

        header nav ul {
            list-style: none;
            padding: 0;
        }

        header nav ul li {
            display: inline;
            margin: 0 10px;
        }

        header nav ul li a {
            color: white;
            text-decoration: none;
        }

        .main-container {
            display: flex;
            justify-content: space-between;
            padding: 20px;
        }

        .sidebar,
        .game-tables,
        .chat-box {
            width: 30%;
            padding: 20px;
            border: 1px solid #ccc;
        }

        .sidebar ul,
        .game-tables ul {
            list-style: none;
            padding: 0;
        }

        .chat-box form textarea {
            width: 100%;
            height: 100px;
            margin-bottom: 10px;
        }

        footer {
            text-align: center;
            padding: 10px;
            background-color: #333;
            color: white;
        }

        .preview-container {
            margin-top: 20px;
        }

        .board-preview {
            width: 100%;
            height: 200px;
            border: 1px solid #000;
            display: grid;
            place-items: center;
        }
    </style>
</body>
<script>
    const chatBox = document.getElementById("chat-box");
    const messageInput = document.getElementById("message");
    const sendBtn = document.getElementById("submit-chat");

    const allCookies = document.cookie;
    const cookiesArray = allCookies.split('; ').reduce((acc, cookie) => {
        const [key, value] = cookie.split('=');
        acc[key] = value;
        return acc;
    }, {});
    const token = cookiesArray['jwt'];
    const username = cookiesArray['username'];

    if (!token) {
        alert("Token không tồn tại. Vui lòng đăng nhập.");
        window.location.href = "/login";
    }

    const ws = new WebSocket(`ws://localhost:5000/`);

    ws.onopen = function (e) {
        console.log('Connection to server opened');
        ws.send(JSON.stringify({ type: "authenticate", token: token }));
    };

    ws.onmessage = (e) => {
        const data = JSON.parse(e.data);
        console.log("Message from server:", data);
        if (data.username && data.message)
            appendLog(data.username, data.message);
    };
    ws.onclose = function (e) {
        appendLog("*", "Connection closed");
        console.log("Connection closed");
    };

    function appendLog(username, message) {
        const messages = document.getElementById('chat-box');
        const messageElem = document.createElement("div");
        const messageText = `<p>${username}: ${message}</p>`;
        messageElem.innerHTML = messageText;
        messages.appendChild(messageElem);
    }

    function sendMessage() {
        const messageField = document.getElementById('message');
        const messageContent = messageField.value.trim();

        if (ws.readyState === WebSocket.OPEN && messageContent) {
            console.log("Sending message: %s", messageContent);
            ws.send(JSON.stringify({
                type: "message",
                username: username,
                message: messageContent
            }));
        }

        messageField.value = '';
        messageField.focus();
    }

    sendBtn.addEventListener('click', sendMessage);

    messageInput.addEventListener('keydown', function (e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
</script>
</html>
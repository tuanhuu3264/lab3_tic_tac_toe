<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Game Table</title>
    <link rel="stylesheet" href="../styles.css">
</head>

<body>
    <header>
        <nav>
            <ul>
                <li><a href="/rooms">Home</a></li>
                <li><a href="/create-rooms">Create Table</a></li>
                <li><a href="/leaderboard">Leaderboard</a></li>
                <li><a href="/ranked-player">Ranked Player</a></li>
                <li><a href="/profile">Profile</a></li>
                <li><a href="/logout">Logout</a></li>
            </ul>
        </nav>
    </header>
    <input type="hidden" id="isOwner" value="{{isOwner}}">
   {{#if isOwner}}
   <h2>YOUR ROOM ID: {{room.id}}</h2>
   <button id="start-btn">Start</button>
   {{else}}
   <h2>ROOM ID: {{room.id}}</h2>
   <button id="ready-btn">Ready</button>
   {{/if}}
    <div class="main-container">
        <div class="game-tables">
            <div id="main">
                <h1>TIC-TAC-TOE</h1>
                <div>
                    <div id="game-status" class="status">Chờ đối thủ...</div>
                    <div class="board" id="board"></div>
                    <button id="restart-btn" style="display:none;">Bắt đầu lại</button>
                </div>

            </div>
            <script src="main.js"></script>
        </div>
        <div class="chat-box">
            <h3>World Chat</h3>
            <div class="chat-history" id="chat-box-room">
                {{#each chatMessages}}
                <p><span class="chat-time">{{this.createdAt}}</span> - <span class="chat-user">{{this.username}}</span>:
                    {{this.message}}</p>
                {{/each}}
            </div>
            <div class="chat-input">
                <textarea id="message-room" name="message" placeholder="Type a message..." required></textarea>
                <button id="submit-chat-room" type="submit">Send</button>
            </div>
        </div>
    </div>


    <footer>
        <p>&copy; 2024 Game Tic Tac Toe</p>
    </footer>

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        header {
            background-color: #333;
            padding: 10px;
            text-align: center;
        }

        header nav ul {
            list-style: none;
            padding: 0;
        }

        header nav ul li {
            display: inline;
            margin: 0 10px;
        }

        header nav ul li a {
            color: white;
            text-decoration: none;
        }
.main-container {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 20px;
    gap: 30px;
    flex-wrap: wrap; 
}
.game-tables {
    background-color: #fff;
    border-radius: 10px;
    padding: 30px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 650px;
    text-align: center;
}

.game-tables h1 {
    color: #333;
    font-size: 32px;
    margin-bottom: 20px;
}
 .board {
            display: grid;
            grid-template-columns: repeat(4, 100px);
            grid-template-rows: repeat(4, 100px);
            gap: 5px;
        }
        .cell {
            width: 100px;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #e0e0e0;
            font-size: 24px;
            cursor: pointer;
            border: 1px solid #ccc;
        }
        .cell.taken {
            cursor: not-allowed;
        }
        .status {
            margin-top: 20px;
            font-size: 18px;
        }
.chat-box {
    padding: 20px;
    border: 1px solid #ccc;
    background-color: #f9f9f9;
    width: 350px;
    height: 450px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}
.chat-box h3 {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 15px;
    color: #333;
}

.chat-history {
    flex-grow: 1;
    padding: 10px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    max-height: 250px;
    overflow-y: auto;
    margin-bottom: 10px;
    font-size: 14px;
    color: #333;
}

.chat-history p {
    margin: 5px 0;
    padding: 3px;
}

.chat-history .chat-time {
    font-size: 12px;
    color: #999;
}

.chat-history .chat-user {
    font-weight: bold;
    color: #0066cc;
}

.chat-input {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.chat-input textarea {
    width: 100%;
    height: 60px;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ddd;
    font-size: 14px;
    color: #333;
    resize: none;
}

.chat-input button {
    align-self: flex-end;
    background-color: #007bff;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    font-weight: bold;
}

.chat-input button:hover {
    background-color: #0056b3;
}

.chat-input button:disabled {
    background-color: #bbb;
    cursor: not-allowed;
}


    </style>
</body>
<script>
    let currentPlayer = '';
    let enemyPlayer = '';
    let gameOver = false;
    const readyBtn = document.getElementById('ready-btn');
    const startBtn = document.getElementById('start-btn');
    const boardElement = document.getElementById('board');

    const gameStatus = document.getElementById('game-status');
    const restartBtn = document.getElementById('restart-btn');

    const board = Array(4).fill().map(() => Array(4).fill(''));
      function createBoard() {
            boardElement.innerHTML = '';
            board.forEach((row, rowIndex) => {
                row.forEach((cell, colIndex) => {
                    const cellElement = document.createElement('div');
                    cellElement.classList.add('cell');
                    cellElement.dataset.row = rowIndex;
                    cellElement.dataset.col = colIndex;
                    cellElement.innerText = cell;

                    if (cell !== '') {
                        cellElement.classList.add('taken');
                    }

                    cellElement.addEventListener('click', () => {
                        if (gameOver || cell !== '') return;
                        makeMove(rowIndex, colIndex);
                    });

                    boardElement.appendChild(cellElement);
                });
            });
        }
    function makeMove(row, col) {
            if (gameOver || board[row][col] !== '') return;

            board[row][col] = currentPlayer;
            socket.send(JSON.stringify({ type: 'move', row, col, player: currentPlayer }));

            createBoard();
            checkWinner();
        }

        function checkWinner() {
            const lines = [
                ...board, 
                ...board[0].map((_, colIndex) => board.map(row => row[colIndex])), 
                [[0, 0], [1, 1], [2, 2], [3, 3]], 
                [[0, 3], [1, 2], [2, 1], [3, 0]],
            ];

            for (const line of lines) {
                const [a, b, c, d] = line;
                const [x, y, z, w] = line.map(([i, j]) => board[i][j]);
                if (x && x === y && y === z && z === w) {
                    gameOver = true;
                    gameStatus.innerText = `Người chơi ${currentPlayer} chiến thắng!`;
                    restartBtn.style.display = 'inline-block';
                    return;
                }
            }

            if (board.flat().every(cell => cell !== '')) {
                gameOver = true;
                gameStatus.innerText = 'Hòa!';
                restartBtn.style.display = 'inline-block';
            }
        }

    const chatBox = document.getElementById("chat-box-room");
    const messageInput = document.getElementById("message-room");
    const sendBtn = document.getElementById("submit-chat-room");
    const isOwner = document.getElementById("isOwner").value;
    const pathParts = window.location.pathname.split('/');
    const roomId = pathParts[pathParts.length - 1];

    const allCookies = document.cookie;
    const cookiesArray = allCookies.split('; ').reduce((acc, cookie) => {
        const [key, value] = cookie.split('=');
        acc[key] = value;
        return acc;
    }, {});
    const token = cookiesArray['jwt'];
    const username = cookiesArray['username'];

    if (!token) {
        alert("Token không tồn tại. Vui lòng đăng nhập.");
        window.location.href = "/login";
    }

    const ws = new WebSocket(`ws://localhost:5000/`);

    ws.onopen = function () {
        console.log('Connection to server opened');
        ws.send(JSON.stringify({ type: "authenticate", token: token }));
    };

    ws.onmessage = (e) => {
        const data = JSON.parse(e.data);
        console.log("Message from server:", data);
        if (data.username && data.message && data.type === "room" && data.roomId === roomId) {
            appendLog(data.username, data.message);
        }
        if(data.type==="start-game" && data.roomId === roomId){
            currentPlayer = data.player;
            gameStatus.innerText = `Lượt của người chơi ${currentPlayer}`;
        }
        if (data.type === "ready" && data.roomId === roomId) {
            enemyPlayer = data.player;
            gameStatus.innerText = `Lượt của người chơi ${currentPlayer}`;
        }
        if(data.type==="move" && data.roomId === roomId){
            board[data.row][data.col] = data.player;
            createBoard();
            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
            gameStatus.innerText = `Lượt của người chơi ${currentPlayer}`;
            checkWinner();
        }
        if(data.type==="restart" && data.roomId === roomId ){
            resetGame();
        }

         restartBtn.addEventListener('click', () => {
            socket.send(JSON.stringify({ type: 'restart' }));
        });

        function resetGame() {
            gameOver = false;
            currentPlayer = '';
            gameStatus.innerText = 'Chờ đối thủ...';
            restartBtn.style.display = 'none';
            board.forEach(row => row.fill(''));
            createBoard();
        }
    };

    ws.onclose = function () {
        appendLog("*", "Connection closed");
        console.log("Connection closed");
    };

    ws.onerror = function (e) {
        console.error("WebSocket error:", e);
    };

    function appendLog(username, message) {
        const messages = document.getElementById('chat-box-room');
        const messageElem = document.createElement("div");
        const messageText = `<p>${username}: ${message}</p>`;
        messageElem.innerHTML = messageText;
        messages.appendChild(messageElem);
    }

    function sendMessage() {
        const messageField = document.getElementById('message-room');
        const messageContent = messageField.value;

        if (ws.readyState === WebSocket.OPEN && messageContent) {
            console.log("Sending message: %s", messageContent);
            ws.send(JSON.stringify({
                type: "message",
                roomId: roomId,
                username: username,
                message: messageContent,
                kind: "room"
            }));
        }

        messageField.value = '';
        messageField.focus();
    }

    function sendReady() {
            if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({
                    type: "message",
                    roomId: roomId,
                    username: username,
                    kind: "ready"
                }));
            }

        }
    readyBtn.addEventListener('click', function (event) {
        event.preventDefault(); 
        sendReady();
    });

    function sendStart() {

            if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({
                    type: "message",
                    roomId: roomId,
                    username: username,
                    kind: "start-game"
                }));
            }
        }
        readyBtn.addEventListener('click', function (event) {
            event.preventDefault();
            sendReady();
        });
    function sendMove() {

            if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({
                    type: "message",
                    roomId: roomId,
                    username: username,
                    kind: "move",
                    row : row,
                    col : col
                }));
            }
        }
        readyBtn.addEventListener('click', function (event) {
            event.preventDefault();
            sendReady();
        });

</script>

</html>